// ==UserScript==
// @name         Kemer Â¢ûÂº∑
// @name:zh-TW   Kemer Â¢ûÂº∑
// @name:zh-CN   Kemer Â¢ûÂº∫
// @name:ja      Kemer Âº∑Âåñ
// @name:en      Kemer Enhancement
// @version      0.0.48
// @author       Canaan HS
// @description        ÁæéÂåñ‰ªãÈù¢ÂíåÈáçÊñ∞ÊéíÁâàÔºåÂåÖÊã¨ÁßªÈô§Âª£ÂëäÂíåÂ§öÈ§òÁöÑÊ©´ÂπÖÔºå‰øÆÊ≠£Áπ™Â∏´ÂêçÁ®±ÂíåÁ∑®ËºØÁõ∏ÈóúÁöÑË≥áË®ä‰øùÂ≠òÔºåËá™ÂãïËºâÂÖ•ÂéüÂßãÂúñÂÉèÔºåËèúÂñÆË®≠ÁΩÆÂúñÂÉèÂ§ßÂ∞èÈñìË∑ùÔºåÂø´Êç∑ÈçµËß∏ÁôºËá™ÂãïÊªæÂãïÔºåËß£ÊûêÊñáÊú¨‰∏≠ÁöÑÈÄ£Áµê‰∏¶ËΩâÊèõÁÇ∫ÂèØÈªûÊìäÁöÑÈÄ£ÁµêÔºåÂø´ÈÄüÁöÑÈ†ÅÈù¢ÂàáÊèõÂíåË∑≥ËΩâÂäüËÉΩÔºå‰∏¶ÈáçÊñ∞ÂÆöÂêëÂà∞Êñ∞ÂàÜÈ†Å
// @description:zh-TW  ÁæéÂåñ‰ªãÈù¢ÂíåÈáçÊñ∞ÊéíÁâàÔºåÂåÖÊã¨ÁßªÈô§Âª£ÂëäÂíåÂ§öÈ§òÁöÑÊ©´ÂπÖÔºå‰øÆÊ≠£Áπ™Â∏´ÂêçÁ®±ÂíåÁ∑®ËºØÁõ∏ÈóúÁöÑË≥áË®ä‰øùÂ≠òÔºåËá™ÂãïËºâÂÖ•ÂéüÂßãÂúñÂÉèÔºåËèúÂñÆË®≠ÁΩÆÂúñÂÉèÂ§ßÂ∞èÈñìË∑ùÔºåÂø´Êç∑ÈçµËß∏ÁôºËá™ÂãïÊªæÂãïÔºåËß£ÊûêÊñáÊú¨‰∏≠ÁöÑÈÄ£Áµê‰∏¶ËΩâÊèõÁÇ∫ÂèØÈªûÊìäÁöÑÈÄ£ÁµêÔºåÂø´ÈÄüÁöÑÈ†ÅÈù¢ÂàáÊèõÂíåË∑≥ËΩâÂäüËÉΩÔºå‰∏¶ÈáçÊñ∞ÂÆöÂêëÂà∞Êñ∞ÂàÜÈ†Å
// @description:zh-CN  ÁæéÂåñÁïåÈù¢ÂíåÈáçÊñ∞ÊéíÁâàÔºåÂåÖÊã¨ÁßªÈô§ÂπøÂëäÂíåÂ§ö‰ΩôÁöÑÊ®™ÂπÖÔºå‰øÆÊ≠£ÁîªÂ∏àÂêçÁß∞ÂíåÁºñËæëÁõ∏ÂÖ≥ÁöÑËµÑËÆØ‰øùÂ≠òÔºåËá™Âä®ËΩΩÂÖ•ÂéüÂßãÂõæÂÉèÔºåËèúÂçïËÆæÁΩÆÂõæÂÉèÂ§ßÂ∞èÈó¥Ë∑ùÔºåÂø´Êç∑ÈîÆËß¶ÂèëËá™Âä®ÊªöÂä®ÔºåËß£ÊûêÊñáÊú¨‰∏≠ÁöÑÈìæÊé•Âπ∂ËΩ¨Êç¢‰∏∫ÂèØÁÇπÂáªÁöÑÈìæÊé•ÔºåÂø´ÈÄüÁöÑÈ°µÈù¢ÂàáÊç¢ÂíåË∑≥ËΩ¨ÂäüËÉΩÔºåÂπ∂ÈáçÊñ∞ÂÆöÂêëÂà∞Êñ∞ÂàÜÈ†Å
// @description:ja     „Ç§„É≥„Çø„Éº„Éï„Çß„Ç§„Çπ„ÅÆÁæéÂåñ„Å®ÂÜçÈÖçÁΩÆ„ÄÅÂ∫ÉÂëä„ÇÑ‰ΩôÂàÜ„Å™„Éê„Éä„Éº„ÅÆÂâäÈô§„ÄÅ„Ç§„É©„Çπ„Éà„É¨„Éº„Çø„ÉºÂêç„ÅÆ‰øÆÊ≠£„Å®Èñ¢ÈÄ£ÊÉÖÂ†±„ÅÆ‰øùÂ≠ò„ÅÆÁ∑®ÈõÜ„ÄÅ„Ç™„É™„Ç∏„Éä„É´ÁîªÂÉè„ÅÆËá™ÂãïË™≠„ÅøËæº„Åø„ÄÅ„É°„Éã„É•„Éº„Åß„ÅÆÁîªÂÉè„ÅÆ„Çµ„Ç§„Ç∫„Å®ÈñìÈöî„ÅÆË®≠ÂÆö„ÄÅ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„Éº„Å´„Çà„ÇãËá™Âãï„Çπ„ÇØ„É≠„Éº„É´„ÅÆ„Éà„É™„Ç¨„Éº„ÄÅ„ÉÜ„Ç≠„Çπ„ÉàÂÜÖ„ÅÆ„É™„É≥„ÇØ„ÅÆËß£Êûê„Å®„ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ„Å™„É™„É≥„ÇØ„Å∏„ÅÆÂ§âÊèõ„ÄÅÈ´òÈÄü„Å™„Éö„Éº„Ç∏Âàá„ÇäÊõø„Åà„Å®„Ç∏„É£„É≥„ÉóÊ©üËÉΩ„ÄÅÊñ∞„Åó„ÅÑ„Çø„Éñ„Å∏„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
// @description:en     Beautify the interface and re-layout, including removing ads and redundant banners, correcting artist names and editing related information retention, automatically loading original images, setting image size and spacing in the menu, triggering automatic scrolling with hotkeys, parsing links in the text and converting them to clickable links, fast page switching and jumping functions, and redirecting to a new tab

// @match        *://kemono.su/*
// @match        *://coomer.su/*
// @match        *://*.kemono.su/*
// @match        *://*.coomer.su/*

// @icon         https://cdn-icons-png.flaticon.com/512/2566/2566449.png

// @license      MIT
// @namespace    https://greasyfork.org/users/989635

// @run-at       document-end
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_openInTab
// @grant        GM_addElement
// @grant        GM_getResourceURL
// @grant        GM_xmlhttpRequest
// @grant        GM_getResourceText
// @grant        GM_registerMenuCommand
// @grant        GM_addValueChangeListener

// @require      https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.3/jquery-ui.min.js
// @require      https://update.greasyfork.org/scripts/495339/1382008/ObjectSyntax_min.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/react/18.3.1/umd/react.production.min.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.3.1/umd/react-dom.production.min.js

// @resource     loading https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/images/loading.gif
// @resource     font-awesome https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/svg-with-js.min.css
// ==/UserScript==

(function () {
    const User_Config = {
        Global_Page: {
            BlockAds: {mode: 0, enable: true}, // ÈòªÊìãÂª£Âëä
            FixArtist: {mode: 0, enable: true}, // ‰øÆÂæ©‰ΩúËÄÖÂêçÁ®±
            BackToTop: {mode: 0, enable: true}, // ÁøªÈ†ÅÂæåÂõûÂà∞È†ÇÈÉ®
            KeyScroll: {mode: 1, enable: true}, // ‰∏ä‰∏ãÈçµËß∏ÁôºËá™ÂãïÊªæÂãï [mode: 1 = ÂãïÁï´ÂÅµÊªæÂãï, mode: 2 = ÈñìÈöîÊªæÂãï] (ÈÅ∏ÊìáÂ∞çÊñºËá™Â∑±ËºÉÈ†ÜÊö¢ÁöÑ, coomer ÁÑ°Êïà‰ªñË¢´ÈòªÊ≠¢‰∫Ü)
            TextToLink: {mode: 0, enable: true}, // ÈÄ£ÁµêÁöÑ (ÊñáÊú¨ -> Ë∂ÖÈÄ£Áµê)
            DeleteNotice: {mode: 0, enable: true}, // Âà™Èô§‰∏äÊñπÂÖ¨Âëä
            SidebarCollapse: {mode: 0, enable: true}, // ÂÅ¥ÈÇäÊîîÊë∫Áñä
        },
        Preview_Page: {
            CardZoom: {mode: 2, enable: true}, // Á∏ÆÊîæÈ†êË¶ΩÂç°Â§ßÂ∞è [mode: 1 = Âç°ÁâáÊîæÂ§ß , 2 = Âç°ÁâáÊîæÂ§ß + Êá∏ÊµÆÁ∏ÆÊîæ]
            CardText: {mode: 2, enable: true}, // È†êË¶ΩÂç°ÊñáÂ≠óÊïàÊûú [mode: 1 = Èö±ËóèÊñáÂ≠ó , 2 = Ê∑°ÂåñÊñáÂ≠ó]
            NewTabOpens: {mode: 0, enable: true}, // È†êË¶ΩÈ†ÅÈù¢ÁöÑÂ∏ñÂ≠êÈÉΩ‰ª•Êñ∞ÂàÜÈ†ÅÈñãÂïü
            QuickPostToggle: {mode: 0, enable: true} // Âø´ÈÄüÂàáÊèõÂ∏ñÂ≠ê
        },
        Content_Page: {
            ExtraButton: {mode: 0, enable: true}, // È°çÂ§ñÁöÑ‰∏ãÊñπÊåâÈàï
            LinkBeautify: {mode: 0, enable: true}, // ‰∏ãËºâÈÄ£ÁµêÁæéÂåñ, Áï∂Âá∫Áèæ (browse ¬ª), ÊªëÈº†Êá∏ÊµÆÊúÉÁõ¥Êé•È°ØÁ§∫ÂÖßÂÆπ
            CommentFormat: {mode: 0, enable: true}, // Ë©ïË´ñÂçÄÈáçÊñ∞ÊéíÁâà
            VideoBeautify: {mode: 1, enable: true}, // ÂΩ±ÁâáÁæéÂåñ [mode: 1 = Ë§áË£ΩÁØÄÈªû , 2 = ÁßªÂãïÁØÄÈªû]
            OriginalImage: {mode: 1, enable: true}, // Ëá™ÂãïÂéüÂúñ [mode: 1 = Âø´ÈÄüËá™Âãï , 2 = ÊÖ¢ÈÄüËá™Âãï , 3 = ËßÄÂØüÂæåËß∏Áôº]
        }
    };

    /* ==================== ‰æùË≥¥È†ÖÁõÆ ==================== */
    const Url = Syn.Device.Url;
    const DLL = (() => {
        // È†ÅÈù¢Ê≠£Ââá
        const Posts = /^(https?:\/\/)?(www\.)?.+\/posts\/?.*$/;
        const Search = /^(https?:\/\/)?(www\.)?.+\/artists\/?.*$/;
        const User = /^(https?:\/\/)?(www\.)?.+\/.+\/user\/[^\/]+(\?.*)?$/;
        const Content = /^(https?:\/\/)?(www\.)?.+\/.+\/user\/.+\/post\/.+$/;
        const Favor = /^(https?:\/\/)?(www\.)?.+\/favorites\?type=post\/?.*$/;
        const Link = /^(https?:\/\/)?(www\.)?.+\/.+\/user\/[^\/]+\/links\/?.*$/;
        const FavorArtist = /^(https?:\/\/)?(www\.)?.+\/favorites(?:\?(?!type=post).*)?$/;
        const Announcement = /^(https?:\/\/)?(www\.)?.+\/(dms|(?:.+\/user\/[^\/]+\/announcements))(\?.*)?$/;

        // Â±ïÁ§∫Ë™ûË®Ä
        const Display_Lang = {
            Traditional: {
                RM_01: "üìù Ë®≠ÁΩÆÈÅ∏ÂñÆ",
                MT_01: "Ë®≠ÁΩÆËèúÂñÆ", MO_01: "ÂúñÂÉèË®≠ÁΩÆ",
                MB_01: "ËÆÄÂèñË®≠ÂÆö", MB_02: "ÈóúÈñâÈõ¢Èñã", MB_03: "‰øùÂ≠òÊáâÁî®",
                ML_01: "Ë™ûË®Ä", ML_02: "Ëã±Êñá", ML_03: "ÁπÅÈ´î", ML_04: "Á∞°È´î", ML_05: "Êó•Êñá",
                MIS_01: "ÂúñÁâáÈ´òÂ∫¶", MIS_02: "ÂúñÁâáÂØ¨Â∫¶", MIS_03: "ÂúñÁâáÊúÄÂ§ßÂØ¨Â∫¶", MIS_04: "ÂúñÁâáÈñìÈöîÈ´òÂ∫¶"
            },
            Simplified: {
                RM_01:"üìù ËÆæÁΩÆËèúÂçï",
                MT_01:"ËÆæÁΩÆËèúÂçï", MO_01:"ÂõæÂÉèËÆæÁΩÆ",
                MB_01:"ËØªÂèñËÆæÁΩÆ", MB_02:"ÂÖ≥Èó≠ÈÄÄÂá∫", MB_03:"‰øùÂ≠òÂ∫îÁî®",
                ML_01:"ËØ≠Ë®Ä", ML_02:"Ëã±Êñá", ML_03:"ÁπÅ‰Ωì", ML_04:"ÁÆÄ‰Ωì", ML_05:"Êó•Êñá",
                MIS_01:"ÂõæÁâáÈ´òÂ∫¶", MIS_02:"ÂõæÁâáÂÆΩÂ∫¶", MIS_03:"ÂõæÁâáÊúÄÂ§ßÂÆΩÂ∫¶", MIS_04:"ÂõæÁâáÈó¥ÈöîÈ´òÂ∫¶"
            },
            Japan: {
                RM_01:"üìù Ë®≠ÂÆö„É°„Éã„É•„Éº",
                MT_01:"Ë®≠ÂÆö„É°„Éã„É•„Éº", MO_01:"ÁîªÂÉèË®≠ÂÆö",
                MB_01:"Ë®≠ÂÆö„ÅÆË™≠„ÅøËæº„Åø", MB_02:"Èñâ„Åò„Å¶ÁµÇ‰∫Ü„Åô„Çã", MB_03:"‰øùÂ≠ò„Åó„Å¶ÈÅ©Áî®„Åô„Çã",
                ML_01:"Ë®ÄË™û", ML_02:"Ëã±Ë™û", ML_03:"ÁπÅ‰ΩìÂ≠ó", ML_04:"Á∞°‰ΩìÂ≠ó", ML_05:"Êó•Êú¨Ë™û",
                MIS_01:"ÁîªÂÉè„ÅÆÈ´ò„Åï", MIS_02:"ÁîªÂÉè„ÅÆÂπÖ", MIS_03:"ÁîªÂÉè„ÅÆÊúÄÂ§ßÂπÖ", MIS_04:"ÁîªÂÉè„ÅÆÈñìÈöî„ÅÆÈ´ò„Åï"
            },
            English: {
                RM_01:"üìù Settings Menu",
                MT_01:"Settings Menu", MO_01:"Image Settings",
                MB_01:"Load Settings", MB_02:"Close and Exit", MB_03:"Save and Apply",
                ML_01:"Language", ML_02:"English", ML_03:"Traditional Chinese", ML_04:"Simplified Chinese", ML_05:"Japanese",
                MIS_01:"Image Height", MIS_02:"Image Width", MIS_03:"Maximum Image Width", MIS_04:"Image Spacing Height"
            }
        }, Match = {
            "zh-TW": Display_Lang.Traditional, "zh-HK": Display_Lang.Traditional, "zh-MO": Display_Lang.Traditional,
            "zh-CN": Display_Lang.Simplified, "zh-SG": Display_Lang.Simplified,
            "en-US": Display_Lang.English, "ja": Display_Lang.Japan,
        };

        // ÊâÄÈúÄÊ®£Âºè (ÈúÄË¶ÅÂÇ≥ÂÖ•È°èËâ≤ÁöÑ, Â∞±ÊòØÈúÄË¶ÅÂãïÊÖãÈÅ©ÊáâÈ°èËâ≤ËÆäÂåñ)
        let Style_Pointer;
        const Style = {
            Global: async (Color) => { // ÂÖ®Âüü ‰øÆÂæ©ÊâÄÈúÄ
                Syn.AddStyle(`
                    /* ÊêúÂ∞ãÈ†ÅÈù¢ÁöÑÊ®£Âºè */
                    fix_tag:hover { color: ${Color}; }
                    .fancy-image__image, fix_name, fix_tag, fix_edit {
                        cursor: pointer;
                    }
                    .user-card__info {
                        display: flex;
                        flex-direction: column;
                        align-items: flex-start;
                    }
                    fix_name {
                        color: #fff;
                        font-size: 28px;
                        font-weight: 500;
                        max-width: 320px;
                        overflow: hidden;
                        padding: .25rem .1rem;
                        border-radius: .25rem;
                        white-space: nowrap;
                        text-overflow: ellipsis;
                    }
                    .edit_artist {
                        position: absolute;
                        top: 36%;
                        right: 8%;
                        color: #fff;
                        display: none;
                        font-size: 14px;
                        font-weight: 700;
                        background: #666;
                        white-space: nowrap;
                        padding: .25rem .5rem;
                        border-radius: .25rem;
                        transform: translateY(-100%);
                    }
                    .edit_textarea {
                        color: #fff;
                        display: block;
                        font-size: 30px;
                        padding: 6px 1px;
                        line-height: 5vh;
                        text-align: center;
                    }
                    .user-card:hover .edit_artist {
                        display: block;
                    }
                    .user-card:hover fix_name {
                        background-color: ${Color};
                    }
                    .edit_textarea ~ fix_name,
                    .edit_textarea ~ .edit_artist {
                        display: none !important;
                    }

                    /* È†êË¶ΩÈ†ÅÈù¢ÁöÑÊ®£Âºè */
                    fix_view {
                        display: flex;
                        flex-flow: wrap;
                        align-items: center;
                    }
                    fix_view fix_name {
                        font-size: 2rem;
                        font-weight: 700;
                        padding: .25rem 3rem;
                        border-radius: .25rem;
                        transition: background-color 0.3s ease;
                    }
                    fix_view .edit_artist {
                        top: 40%;
                        right: 5%;
                        transform: translateY(-80%);
                    }
                    fix_view:hover fix_name {
                        background-color: ${Color};
                    }
                    fix_view:hover .edit_artist {
                        display: block;
                    }

                    /* ÂÖßÂÆπÈ†ÅÈù¢ÁöÑÊ®£Âºè */
                    fix_cont {
                        display: flex;
                        justify-content: space-around;
                    }
                    fix_cont fix_name {
                        color: ${Color};
                        font-size: 1.25em;
                        display: inline-block;
                    }
                    fix_cont .edit_artist {
                        top: 95%;
                        right: -10%;
                    }
                    fix_cont:hover fix_name {
                        background-color: #fff;
                    }
                    fix_cont:hover .edit_artist {
                        display: block;
                    }
                `, "Global-Effects");
            },
            Preview: async () => { // Â∏ñÂ≠êÈ†êË¶ΩÈ†ÅÊâÄÈúÄ
                Syn.AddStyle(`
                    .gif-overlay {
                        top: 45%;
                        left: 50%;
                        width: 60%;
                        height: 60%;
                        opacity: 0.5;
                        z-index: 9999;
                        position: absolute;
                        border-radius: 50%;
                        background-size: contain;
                        background-position: center;
                        background-repeat: no-repeat;
                        transform: translate(-50%, -50%);
                        background-image: url("${GM_getResourceURL('loading')}");
                    }
                    .card-list__items {
                        gap: 0.5em;
                        display: flex;
                        grid-gap: 0.5em;
                        position: relative;
                        align-items: var(--local-align);
                        flex-flow: var(--local-flex-flow);
                        justify-content: var(--local-justify);
                    }
                `, "Preview-Effects");
            },
            Postview: () => { // ËßÄÁúãÂ∏ñÂ≠êÈ†ÅÊâÄÈúÄ
                const settings = {
                    MenuSet: () => {
                        const data = Syn.Store("g", "MenuSet") ?? [{
                            MT: "2vh",
                            ML: "50vw"
                        }];
                        return data[0];
                    },
                    ImgSet: () => {
                        const data = Syn.Store("g", "ImgSet") ?? [{
                            img_h: "auto",
                            img_w: "auto",
                            img_mw: "100%",
                            img_gap: "0px"
                        }];
                        return data[0];
                    }
                };

                // ËÆÄÂèñÂúñÂÉèË®≠ÁΩÆ
                const cache = settings.ImgSet();
                const width = Syn.Device.iW() / 2;
                Syn.AddStyle(`
                    .Image-style {
                        display: block;
                        width: ${cache.img_w};
                        height: ${cache.img_h};
                        margin: ${cache.img_gap} auto;
                        max-width: ${cache.img_mw};
                    }
                    .Image-loading-indicator {
                        min-width: 50vW;
                        min-height: 50vh;
                        max-width: ${width}px;
                        max-height: ${width * 9 / 16}px;
                        border: 1px solid #fafafa;
                    }
                    .Image-loading-indicator:hover {
                        cursor: pointer;
                    }
                `, "Custom-style");

                return settings;
            },
            Awesome: async (Color) => { // ËßÄÁúãÂ∏ñÂ≠êÈ†ÅÂúñÁ§∫
                Syn.AddStyle(`
                    ${GM_getResourceText("font-awesome")}
                    #next_box a {
                        cursor: pointer;
                    }
                    #next_box a:hover {
                        background-color: ${Color};
                    }
            `, "font-awesome");
            }
        };

        return {
            IsContent: Content.test(Url),
            IsAnnouncement: Announcement.test(Url),
            IsSearch: Search.test(Url) || Link.test(Url) || FavorArtist.test(Url),
            IsAllPreview: Posts.test(Url) || User.test(Url) || Favor.test(Url),

            Language: (lang) => Match[lang] || Match["en-US"],
            Color: Syn.Device.Host.startsWith("coomer") ? "#99ddff !important" : "#e8a17d !important",
            Style, Posts, Search, User, Content, Favor, FavorArtist, Link, Announcement,
        };
    })();

    /* ==================== ÂÖ®ÂüüÂäüËÉΩ ==================== */
    function Global_Function() {
        return {
            SidebarCollapse: async (Mode) => { /* Êî∂Á∏ÆÂÅ¥ÈÇäÊîî */
                if (Syn.Device.Type() === "Mobile") return;

                Syn.AddStyle(`
                    .global-sidebar {
                        opacity: 0;
                        height: 100%;
                        width: 10rem;
                        display: flex;
                        position: fixed;
                        padding: 0.5em 0;
                        transition: 0.8s;
                        background: #282a2e;
                        flex-direction: column;
                        transform: translateX(-9rem);
                    }
                    .global-sidebar:hover {opacity: 1; transform: translateX(0rem);}
                    .content-wrapper.shifted {transition: 0.7s; margin-left: 0rem;}
                    .global-sidebar:hover + .content-wrapper.shifted {margin-left: 10rem;}
                `, "Effects");
            },
            DeleteNotice: async (Mode) => { /* Âà™Èô§ÂÖ¨ÂëäÈÄöÁü• */
                Syn.$$("body > div.content-wrapper.shifted > a")?.remove();
            },
            BlockAds: async (Mode) => { /* (ÈòªÊ≠¢/Â∞ÅÈéñ)Âª£Âëä */
                Syn.AddStyle(`
                    .ipprtcnt, .root--ujvuu, .ad-container {display: none !important}
                `, "Ad-blocking-style");
                Syn.AddScript(`
                    const XMLRequest = XMLHttpRequest.prototype.open;
                    const Ad_observer = new MutationObserver(() => {
                        XMLHttpRequest.prototype.open = function(method, Url) {
                            if (Url.endsWith(".m3u8") || Url === "https://s.magsrv.com/v1/Syn.php") {return}
                            XMLRequest.apply(this, arguments);
                        };
                        document.querySelector("div.ex-over-btn")?.click();
                        document.querySelector(".root--ujvuu button")?.click();
                        document.querySelectorAll(".ad-container").forEach(ad => {ad.remove()});
                    });
                    Ad_observer.observe(document.head, {childList: true, subtree: true});
                `, "Ad-blocking-script");
            },
            TextToLink: async (Mode) => { /* ÈÄ£ÁµêÊñáÊú¨ËΩâÈÄ£Áµê */
                if (!DLL.IsContent && !DLL.IsAnnouncement) return;

                const Protocol_F = /^(?!https?:\/\/)/;
                const Exclusion_F = /onfanbokkusuokibalab\.net/;
                const URL_F = /(?:https?:\/\/[^\s]+)|(?:[a-zA-Z0-9]+\.)?(?:[a-zA-Z0-9]+)\.[^\s]+\/[^\s]+/g;
                let Text;

                if (DLL.IsContent) {
                    Syn.WaitElem("div.post__body", body => {
                        JumpTrigger(body);

                        const article = Syn.$$("article", {root: body});
                        const content = Syn.$$("div.post__content", {root: body});

                        if (article) {
                            Syn.$$("span.choice-text", {all: true, root: article}).forEach(span => {
                                Analysis(span, span.textContent)
                            });
                        } else if (content) {
                            const pre = Syn.$$("pre", {root: content});

                            if (pre) { // ÂñÆ‰∏ÄÂÄã Pre Ê®ôÁ±§ÁöÑÁãÄÊÖã
                                Text = pre.textContent;
                                URL_F.test(Text) && Analysis(pre, Text);
                            } else {
                                Syn.$$("p", {all: true, root: content}).forEach(p=> {
                                    Text = p.textContent;
                                    URL_F.test(Text) && Analysis(p, Text);
                                })

                                Syn.$$("a", {all: true, root: content}).forEach(a=> {
                                    !a.href && Analysis(a, a.textContent);
                                })
                            }
                        }
                    }, {throttle: 600});

                } else if (DLL.IsAnnouncement) {
                    Syn.WaitElem("div.card-list__items pre", content => {
                        JumpTrigger(Syn.$$("div.card-list__items"));

                        content.forEach(pre=> {
                            if (pre.childNodes.length > 1) {
                                Syn.$$("p", {all: true, root: pre}).forEach(p=> {
                                    Text = p.textContent;
                                    URL_F.test(Text) && Analysis(p, Text);
                                })

                                Syn.$$("a", {all: true, root: pre}).forEach(a=> {
                                    !a.href && Analysis(a, a.textContent);
                                })

                            } else {
                                Text = pre.textContent;
                                URL_F.test(Text) && Analysis(pre, Text);
                            }
                        })
                    }, {raf: true, all: true});
                }

                async function JumpTrigger(root) { // Â∞áË©≤ÂçÄÂ°äÁöÑÊâÄÊúâ a Ëß∏ÁôºË∑≥ËΩâ, ÊîπÊàêÈñãÊñ∞ÂàÜÈ†Å
                    Syn.AddListener(root, "click", event => {
                        const target = event.target.closest("a:not(.fileThumb)");
                        target && (event.preventDefault(), GM_openInTab(target.href, { active: false }));
                    }, {capture: true});
                }

                async function Analysis(father, text) { // Ëß£ÊûêÂæåËΩâÊèõÁ∂≤ÂùÄ
                    if (!Exclusion_F.test(text)) {
                        father.innerHTML = text.replace(URL_F, url => {
                            const decode = decodeURIComponent(url).trim();
                            return `<a href="${decode.replace(Protocol_F, "https://")}">${decode}</a>`;
                        })
                    }
                }
            },
            FixArtist: async (Mode) => { /* ‰øÆÂæ©ËóùË°ìÂÆ∂ÂêçÁ®± */
                DLL.Style.Global(DLL.Color); // ËºâÂÖ•‰æùË≥¥Ê®£Âºè

                const Fix_Requ = { // ÂÆ£Âëä‰øÆÂæ©ÈúÄË¶ÅÁöÑÂáΩÊï∏
                    Get_Record: () => Syn.Storage("fix_record_v2", { type: localStorage, error: new Map() }),
                    Save_Record: async function (save) {
                        await Syn.Storage("fix_record_v2",
                            {
                                type: localStorage,
                                value: new Map([...this.Get_Record(), ...save]) // ÂèñÂæóÂÆåÊï¥Êï∏Êìö‰∏¶Âêà‰Ωµ
                            }
                        );
                        Fix_Cache.clear();
                    },
                    Save_Work: Syn.Debounce(() => { // ‰øùÂ≠òÂ∑•‰Ωú
                        Fix_Requ.Save_Record(Fix_Cache);
                    }, 1000),
                    Fix_Name_Support: new Set(["pixiv", "fanbox"]),
                    Fix_Tag_Support: {
                        ID: /Patreon|Fantia|Pixiv|Fanbox/gi,
                        Patreon: "https://www.patreon.com/user?u={id}",
                        Fantia: "https://fantia.jp/fanclubs/{id}/posts",
                        Pixiv: "https://www.pixiv.net/users/{id}/artworks",
                        Fanbox: "https://www.pixiv.net/fanbox/creator/{id}",
                    
                        NAME: /Fansly|OnlyFans/gi,
                        OnlyFans: "https://onlyfans.com/{name}",
                        Fansly: "https://fansly.com/{name}/posts",
                    },
                    Fix_Request: async function (url, headers={}) { // Ë´ãÊ±Ç‰øÆÂæ©Êï∏Êìö
                        return new Promise(resolve => {
                            GM_xmlhttpRequest({
                                method: "GET",
                                url: url,
                                headers: headers,
                                onload: response => resolve(response),
                                onerror: () => resolve(),
                                ontimeout: () => resolve()
                            })
                        });
                    },
                    Get_Pixiv_Name: async function (id) { // ÂèñÂæó Pixiv ÂêçÁ®±
                        const response = await this.Fix_Request(
                            `https://www.pixiv.net/ajax/user/${id}?full=1&lang=ja`, {referer: "https://www.pixiv.net/"}
                        );
                        if (response.status === 200) {
                            const user = JSON.parse(response.responseText);
                            let user_name = user.body.name;
                            user_name = user_name.replace(/(c\d+)?([Êó•ÊúàÁÅ´Ê∞¥Êú®ÈáëÂúü]ÊõúÊó•?|[123ÔºëÔºíÔºì‰∏Ä‰∫å‰∏â]Êó•ÁõÆ?)[Êù±ÂçóË•øÂåó]..?\d+\w?/i, '');
                            user_name = user_name.replace(/[@Ôº†]?(fanbox|fantia|skeb|„Éï„Ç°„É≥„Éú|„É™„ÇØ„Ç®„Çπ„Éà|„Åä?‰ªï‰∫ã|Êñ∞Âàä|ÂçòË°åÊú¨|Âêå‰∫∫Ë™å)+(.*(Êõ¥Êñ∞|ÂãüÈõÜ|ÂÖ¨Èñã|ÈñãË®≠|ÈñãÂßã|Áô∫Â£≤|Ë≤©Â£≤|ÂßîË®ó|‰ºëÊ≠¢|ÂÅúÊ≠¢)+‰∏≠?[!ÔºÅ]?$|$)/gi, '');
                            user_name = user_name.replace(/\(\)|ÔºàÔºâ|„Äå„Äç|„Äê„Äë|[@Ôº†_Ôºø]+$/g, '').trim();
                            return user_name;
                        } else return unSynined;
                    },
                    Fix_Url: function (url) { // ÈÄ£ÁµêÁ∂≤ÂùÄ‰øÆÂæ©
                        url = url.match(/\/([^\/]+)\/([^\/]+)\/([^\/]+)$/) || url.match(/\/([^\/]+)\/([^\/]+)$/); // ÂåπÈÖçÂá∫‰∏âÊÆµÈ°ûÂûã, ÊàñÂÖ©ÊÆµÈ°ûÂûãÁöÑÊ†ºÂºè
                        url = url.splice(1).map(url => url.replace(/\/?(www\.|\.com|\.jp|\.net|\.adult|user\?u=)/g, "")); // ÊéíÈô§‰∏çÂøÖË¶ÅÂ≠ó‰∏≤
                        return url.length >= 3 ? [url[0], url[2]] : url;
                    },
                    Fix_Update_Ui: async function (href, id, name_onj, tag_obj, text) { // ‰øÆÂæ©ÂæåÊõ¥Êñ∞ UI
                        /* ÂâµÂª∫Á∑®ËºØÊåâÈàï */
                        const edit = GM_addElement("fix_edit", { id: id, class: "edit_artist", textContent: "Edit" });
                        name_onj.parentNode.insertBefore(edit, name_onj);
                        name_onj.outerHTML = `<fix_name jump="${href}">${text.trim()}</fix_name>`;

                        /* ÂèñÂæóÊîØÊè¥‰øÆÂæ©ÁöÑÊ≠£Ââá */
                        const tag_text = tag_obj.textContent;
                        const support_id = this.Fix_Tag_Support.ID;
                        const support_name = this.Fix_Tag_Support.NAME;

                        if (support_id.test(tag_text)) {
                            tag_obj.innerHTML = tag_text.replace(support_id, tag => {
                                return `<fix_tag jump="${this.Fix_Tag_Support[tag].replace("{id}", id)}">${tag}</fix_tag>`;
                            });
                        } else if (support_name.test(tag_text)) {
                            tag_obj.innerHTML = tag_text.replace(support_name, tag => {
                                return `<fix_tag jump="${this.Fix_Tag_Support[tag].replace("{name}", id)}">${tag}</fix_tag>`;
                            });
                        }
                    },
                    Fix_Trigger: async function (object) { // Ëß∏Áôº‰øÆÂæ©
                        const {Url, TailId, Website, NameObject, TagObject} = object;

                        let Record = Record_Cache.get(TailId); // ÂæûÁ∑©Â≠ò ‰ΩøÁî®Â∞æÈÉ® ID ÂèñÂá∫Â∞çÊáâÁ¥ÄÈåÑ

                        if (Record) {
                            this.Fix_Update_Ui(Url, TailId, NameObject, TagObject, Record);
                        } else {
                            if (this.Fix_Name_Support.has(Website)) {
                                Record = await this.Get_Pixiv_Name(TailId) || NameObject.textContent;
                                this.Fix_Update_Ui(Url, TailId, NameObject, TagObject, Record);
                                Fix_Cache.set(TailId, Record); // Ê∑ªÂä†Êï∏Êìö
                                this.Save_Work; // ÂëºÂè´‰øùÂ≠òÂ∑•‰Ωú
                            } else {
                                Record = NameObject.textContent;
                                this.Fix_Update_Ui(Url, TailId, NameObject, TagObject, Record);
                            }
                        }
                    },
                    /* ===== ÂâçÁΩÆËôïÁêÜËß∏Áôº ===== */
                    Search_Fix: async function (items) { // ÈáùÂ∞ç ÊêúÂ∞ãÈ†Å, ÈÇ£Á®ÆÊúâË®±Â§öÁî®Êà∂Âç°ÁöÑ
                        items.setAttribute("fix", true); // Ê∑ªÂä†‰øÆÂæ©Ê®ôÁ±§

                        const url = items.href;
                        const img = Syn.$$("img", {root: items});
                        const parse = this.Fix_Url(url);

                        img.setAttribute("jump", url); // ÂúñÁâáË®≠ÁΩÆË∑≥ËΩâÈÄ£Áµê
                        items.removeAttribute("href"); // Âà™Èô§ÂéüÂßãË∑≥ËΩâÈÄ£Áµê
                        img.removeAttribute("src"); // Âà™Èô§ÂúñÁâáË∑≥ËΩâÈÄ£Áµê

                        this.Fix_Trigger({
                            Url: url, // Ë∑≥ËΩâÈÄ£Áµê
                            TailId: parse[1], // Â∞æÈÉ® id Ê®ôËôü
                            Website: parse[0], // Á∂≤Á´ô
                            NameObject: Syn.$$(".user-card__name", {root: items}), // ÂêçÁ®±Áâ©‰ª∂
                            TagObject: Syn.$$(".user-card__service", {root: items}) // Ê®ôÁ±§Áâ©‰ª∂
                        });
                    },
                    Other_Fix: async function (artist, tag="", href=null, reTag="<fix_view>") { // ÈáùÂ∞çÂÖ∂È§òÈ†ÅÈù¢ÁöÑ‰øÆÂæ©
                        try {
                            const parent = artist.parentNode;
                            const url = href || parent.href;
                            const parse = this.Fix_Url(url);
    
                            await this.Fix_Trigger({
                                Url: url,
                                TailId: parse[1],
                                Website: parse[0],
                                NameObject: artist,
                                TagObject: tag
                            });

                            $(parent).replaceWith(function() {
                                return $(reTag, { html: $(this).html()})
                            });
                        } catch {/* Èò≤Ê≠¢ÂãïÊÖãÁõ£ËÅΩÈÄ≤Ë°å‰∫åÊ¨°Êìç‰ΩúÊôÇÁöÑÈåØË™§ (Âõ†ÁÇ∫ DOM Â∑≤Á∂ìË¢´‰øÆÊîπ) */}
                    },
                    Dynamic_Fix: async function (Listen, Operat,  Mode=null) {
                        let observer, options;
                        Syn.Observer(Listen, ()=> {
                            Record_Cache = this.Get_Record(); // Ëß∏ÁôºÊôÇÈáçÊñ∞ÊäìÂèñ
                            const wait = setInterval(()=> { // ÁÇ∫‰∫ÜÁ¢∫‰øùÊâæÂà∞ Operat ÂÖÉÁ¥†
                                const operat = typeof Operat === "string" ? Syn.$$(Operat) : Operat;
                                if (operat) {
                                    clearInterval(wait);
                                    switch (Mode) {
                                        case 1: // ÈáùÂ∞ç QuickPostToggle ÁöÑÂãïÊÖãÁõ£ËÅΩ (‰πüÂèØ‰ª•Áõ¥Êé•Âú® QuickPost ÂØ´ÂàùÂßãÂåñÂëºÂè´)
                                            this.Other_Fix(operat);
                                            setTimeout(()=> { // ‰øÆÂæ©ÂæåÂª∂ÈÅ≤‰∏Ä‰∏ã, Êñ∑ÈñãÂéüÂÖàËßÄÂØüÂ∞çË±°, Ë®≠ÁΩÆÁÇ∫Â≠êÂÖÉÁ¥†, ÂéüÂõ†ÊòØÂõ†ÁÇ∫ react Ê∏≤ÊüìÈÄ†Êàê dom ÁöÑ‰øÆÊîπ, ÈúÄÈáçÊñ∞Ë®≠ÁΩÆ
                                                observer.disconnect();
                                                observer.observe(Listen.children[0], options);
                                            }, 300);
                                            break;
                                        default: // ÈáùÂ∞çÊêúÂ∞ãÈ†ÅÁöÑÂãïÊÖãÁõ£ËÅΩ
                                            Syn.$$("a", {all: true, root: operat}).forEach(items=> { // Ê≤íÊúâ‰øÆÂæ©Ê®ôÁ±§ÁöÑÊâç‰øÆÂæ©
                                                !items.getAttribute("fix") && this.Search_Fix(items);
                                            });
                                    }
                                }
                            })
                        }, {subtree: false}, back => {
                            observer = back.ob;
                            options = back.op;
                        });
                    }
                }

                const Fix_Cache = new Map(); // ‰øÆÂæ©Âæå Áî®ÊñºÁ∑©Â≠ò
                let Record_Cache = null; // ËÆÄÂèñ‰øÆÂæ©Á¥ÄÈåÑ Áî®ÊñºÁ∑©Â≠ò
                Record_Cache = Fix_Requ.Get_Record(); // ËÆÄÂèñ‰øÆÂæ© Êï∏ÊìöÂà∞Á∑©Â≠ò

                // ÊêúÂ∞ãÈ†ÅÈù¢, Ëàá‰∏Ä‰∫õÁâπÊÆäÈ†êË¶ΩÈ†Å
                if (DLL.IsSearch) {
                    const card_items = Syn.$$(".card-list__items");

                    if (DLL.Link.test(Url)) {
                        const artist = Syn.$$("span[itemprop='name']");
                        artist && Fix_Requ.Other_Fix(artist); // È†êË¶ΩÈ†ÅÁöÑ ÂêçÁ®±‰øÆÂæ©

                        Syn.$$("a", {all: true, root: card_items}).forEach(items=> { Fix_Requ.Search_Fix(items) }); // ÈáùÂ∞ç links È†ÅÈù¢ÁöÑ card
                        Url.endsWith("new") && Fix_Requ.Dynamic_Fix(card_items, card_items); // ÈáùÂ∞ç links/new È†ÅÈù¢ÁöÑ card
                    } else { //! ÈÇÑÈúÄË¶ÅÊ∏¨Ë©¶
                        Fix_Requ.Dynamic_Fix(card_items, card_items);
                        GM_addElement(card_items, "fix-trigger", {style: "display: none;"});
                    }

                } else if (DLL.IsContent) { // ÊòØÂÖßÂÆπÈ†ÅÈù¢
                    const artist = Syn.$$(".post__user-name");
                    const title = Syn.$$("h1 span:nth-child(2)");
                    Fix_Requ.Other_Fix(artist, title, artist.href, "<fix_cont>");

                } else { // È†êË¶ΩÈ†ÅÈù¢
                    const artist = Syn.$$("span[itemprop='name']");
                    if(artist) {
                        Fix_Requ.Other_Fix(artist);

                        if (User_Config.Preview_Page.QuickPostToggle.enable) { // ÂïüÁî®Ë©≤ÂäüËÉΩÊâçÈúÄË¶ÅÂãïÊÖãÁõ£ËÅΩ
                            setTimeout(()=> {
                                Fix_Requ.Dynamic_Fix(Syn.$$("section"), "span[itemprop='name']", 1);
                            }, 300);
                        }
                    }
                }

                // Áõ£ËÅΩÈªûÊìä‰∫ã‰ª∂
                const Device = Syn.Device.Type();
                Syn.AddListener(document.body, "click", event=> {
                    const target = event.target;

                    if (target.matches("fix_edit")) {
                        const display = target.nextElementSibling; // ÂèñÂæó‰∏ãÊñπÁöÑ name ÂÖÉÁ¥†
                        const text = GM_addElement("textarea", { 
                            class: "edit_textarea",
                            style: `height: ${display.scrollHeight + 10}px;`,
                        });

                        const original_name = display.textContent;
                        text.value = original_name.trim();
                        display.parentNode.insertBefore(text, target);

                        text.scrollTop = 0; // ÊªæÂãïÂà∞ÊúÄ‰∏äÊñπ
                        setTimeout(() => {
                            text.focus() // Ë®≠ÁΩÆÁÑ¶Èªû
                            setTimeout(() => { // ÈÅøÂÖçÈÇÑÊ≤íË®≠ÁΩÆÂ•ΩÁÑ¶ÈªûÂ∞±Ëß∏Áôº
                                Syn.Listen(text, "blur", ()=> {
                                    const change_name = text.value.trim();
                                    if (change_name != original_name) {
                                        display.textContent = change_name; // ‰øÆÊîπÈ°ØÁ§∫Âêç
                                        Fix_Requ.Save_Record(new Map([[target.id, change_name]])); // ‰øùÂ≠ò‰øÆÊîπÂêç
                                    }
                                    text.remove();
                                }, { once: true, passive: true });
                            }, 50);
                        }, 300);
                    } else if (target.matches("fix_name") || target.matches("fix_tag") || target.matches("img")) {
                        const jump = target.getAttribute("jump");
                        if (!target.parentNode.matches("fix_cont") && jump) {
                            DLL.IsSearch && Device == "Mobile"
                                ? location.assign(jump)
                                : GM_openInTab(jump, { active: false, insert: false });
                        } else if (jump) { // ÂÖßÂÆπÈ†ÅÈù¢
                            location.assign(jump);
                        }
                    }
                }, { capture: true, passive: true });
            },
            BackToTop: async (Mode) => { /* ÁøªÈ†ÅÂæåÂõûÂà∞È†ÇÈÉ® */
                Syn.AddListener(document.body, "pointerup", event=> {
                    event.target.closest("#paginator-bottom") && Syn.$$("#paginator-top").scrollIntoView();
                }, { capture: true, passive: true });
            },
            KeyScroll: async (Mode) => { /* Âø´Êç∑Ëá™ÂãïÊªæÂãï */
                if (Syn.Device.Type() === "Mobile") return;

                // ÊªæÂãïÈÖçÁΩÆ
                const Config = {
                    Scroll_Pixels: 2,
                    Scroll_Interval: 800,
                };

                const UP_ScrollSpeed = Config.Scroll_Pixels * -1;
                let Scroll, Up_scroll  = false, Down_scroll = false;

                const TopDetected = Syn.Throttle(()=>{ // Ê™¢Ê∏¨Âà∞È†ÇÂÅúÊ≠¢
                    Up_scroll = Syn.Device.sY() == 0 ? false : true;
                }, 600);
                const BottomDetected = Syn.Throttle(()=>{ // Ê™¢Ê∏¨Âà∞Â∫ïÂÅúÊ≠¢
                    Down_scroll =
                    Syn.Device.sY() + Syn.Device.iH() >= document.documentElement.scrollHeight ? false : true;
                }, 600);

                switch (Mode) {
                    case 2:
                        Scroll = (Move) => {
                            const Interval = setInterval(()=> {
                                if (!Up_scroll && !Down_scroll) {
                                    clearInterval(Interval);
                                }

                                if (Up_scroll && Move < 0) {
                                    window.scrollBy(0, Move);
                                    TopDetected();
                                } else if (Down_scroll && Move > 0) {
                                    window.scrollBy(0, Move);
                                    BottomDetected();
                                }
                            }, Config.Scroll_Interval);
                        }
                    default:
                        Scroll = (Move) => {
                            if (Up_scroll && Move < 0) {
                                window.scrollBy(0, Move);
                                TopDetected();
                                requestAnimationFrame(() => Scroll(Move));
                            } else if (Down_scroll && Move > 0) {
                                window.scrollBy(0, Move);
                                BottomDetected();
                                requestAnimationFrame(() => Scroll(Move));
                            }
                        }
                }

                Syn.AddListener(window, "keydown", Syn.Throttle(event => {
                    const key = event.key;
                    if (key == "ArrowUp") {
                        event.stopImmediatePropagation();
                        event.preventDefault();
                        if (Up_scroll) {
                            Up_scroll = false;
                        } else if (!Up_scroll || Down_scroll) {
                            Down_scroll = false;
                            Up_scroll = true;
                            Scroll(UP_ScrollSpeed);
                        }
                    } else if (key == "ArrowDown") {
                        event.stopImmediatePropagation();
                        event.preventDefault();
                        if (Down_scroll) {
                            Down_scroll = false;
                        } else if (Up_scroll || !Down_scroll) {
                            Up_scroll = false;
                            Down_scroll = true;
                            Scroll(Config.Scroll_Pixels);
                        }
                    }
                }, 100), { capture: true });
            }
        }
    }

    /* ==================== ÈÖçÁΩÆËß£ÊûêË™øÁî® ==================== */
    (()=> {
        // È°ûÂûãÂà§Êñ∑
        const Type = (obj) => Object.prototype.toString.call(obj).slice(8, -1);
        // ÈÖçÁΩÆÂèÉÊï∏È©óË≠â
        const Validate = (Num, Bool) => Type(Num) === "Number" && Type(Bool) === "Boolean";
        // ÂëºÂè´È†ÜÂ∫è
        const Order = {
            Global: [
                "SidebarCollapse",
                "DeleteNotice",
                "BlockAds",
                "TextToLink",
                "FixArtist",
                "BackToTop",
                "KeyScroll"
            ],
            Preview: [
                "NewTabOpens",
                "QuickPostToggle",
                "CardZoom",
                "CardText"
            ],
            Content: [
                "LinkBeautify",
                "VideoBeautify",
                "OriginalImage",
                "ExtraButton",
                "CommentFormat",
            ],
        };

        // Ëß£ÊûêÈÖçÁΩÆË™øÁî®Â∞çÊáâÂäüËÉΩ
        async function Call(root, config, page) {
            if (Type(config) !== "Object") { // ‰∏çÊòØÁâ©‰ª∂Á´ãÂç≥ÁµÇÊ≠¢
                Syn.Log("ÈÖçÁΩÆÈ°ûÂûãÈåØË™§", config, { type: "error" });
                return;
            }

            Order[page].forEach(ord => {
                const data = config[ord];
                const mode = data.mode; // Ê®°Âºè
                const enable = data.enable; // ÂïüÁî®ÁãÄÊÖã

                if (Validate(mode, enable)) {
                    enable && root[ord]?.(mode);
                } else {
                    Syn.Log( // ÂèÉÊï∏ÈåØË™§ÊúÉË∑≥ÈÅé, ‰∏¶‰∏îÊâìÂç∞ÈåØË™§
                        "ÈÖçÁΩÆÂèÉÊï∏ÈåØË™§",
                        [ord, mode, enable],
                        { type: "error", collapsed: false }
                    );
                }
            });
        }

        Call(Global_Function(), User_Config.Global_Page, "Global");

    })();

})();